package com.ap.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public enum CropsType {
    BlueJazz("BlueJazz",
            new ArrayList<>(Arrays.asList(1, 2, 2, 2)),
            7,
            true,
            100000000,
            50,
            45,
            45,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Carrot("Carrot",
            new ArrayList<>(Arrays.asList(1, 1, 1)),
            3,
            true,
            100000000,
            35,
            75,
            75,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1),
    Cauliflower("Cauliflower",
            new ArrayList<>(Arrays.asList(1, 2, 4, 4, 1)),
            12,
            true,
            100000000,
            175,
            75,
            75,
            new ArrayList<>(List.of( Season.Spring)),
            true,
            1 ),
    Coffee("CoffeeBean",
            new ArrayList<>(Arrays.asList(1, 2, 2, 3, 2)),
            10,
            false,
            2,
            15,
            null,
            0,
            new ArrayList<>(List.of( Season.Spring,  Season.Summer)),
            false,
            1 ),
    Garlic("Garlic",
            new ArrayList<>(Arrays.asList(1, 1, 1, 1)),
            4,
            true,
            100000000,
            60,
            20,
            20,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Kale("Kale",
            new ArrayList<>(Arrays.asList(1, 2, 2, 1)),
            6,
            true,
            100000000,
            110,
            50,
            50,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Parsnip("Parsnip",
            new ArrayList<>(Arrays.asList(1, 1, 1, 1)),
            4,
            true,
            100000000,
            35,
           25,
            25,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Potato("Potato",
            new ArrayList<>(Arrays.asList(1, 1, 1, 2, 1)),
            6,
            true,
            100000000,
            80,
            25,
            25,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),




    Rhubarb("Rhubarb",
            new ArrayList<>(Arrays.asList(2, 2, 2, 3, 4)),
            13,
            true,
            100000000,
            220,
            null,
            0,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Strawberry("Strawberry",
            new ArrayList<>(Arrays.asList(1, 1, 2, 2, 2)),
            8,
            false,
            4,
            120,
            50,
            50,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Tulip("Tulip",
            new ArrayList<>(Arrays.asList(1, 1, 2, 2)),
            6,
            true,
            100000000,
            30,
            45,
            45,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Unmilled_Rice("UnmilledRice",
            new ArrayList<>(Arrays.asList(1, 2, 2, 3)),
            8,
            true,
            100000000,
            30,
            3,
            3,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Blueberry("Blueberry",
            new ArrayList<>(Arrays.asList(1, 3, 3, 4, 2)),
            13,
            false,
            4,
            50,
            25,
            25,
            new ArrayList<>(List.of( Season.Spring)),
            false,
            1 ),
    Corn("Corn",
            new ArrayList<>(Arrays.asList(2, 3, 3, 3, 3)),
            14,
            false,
            4,
            50,
            25,
            25,
            new ArrayList<>(List.of( Season.Summer,  Season.Fall)),
            false,
            1 ),
    Hot_Pepper("HotPepper",
            new ArrayList<>(Arrays.asList(1, 1, 1, 3, 1)),
            5,
            false,
            3,
            40,
            13,
            13,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Melon("Melon",
            new ArrayList<>(Arrays.asList(1, 2, 3, 3, 3)),
            12,
            true,
            100000000,
            250,
            113,
            113,
            new ArrayList<>(List.of( Season.Summer)),
            true,
            1 ),
    Poppy("Poppy",
            new ArrayList<>(Arrays.asList(1, 2, 2, 2)),
            7,
            true,
            100000000,
            140,
            45,
            45,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Radish("Radish",
            new ArrayList<>(Arrays.asList(2, 1, 2, 1)),
            6,
            true,
            100000000,
            90,
            45,
            45,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Red_Cabbage("RedCabbage",
            new ArrayList<>(Arrays.asList(2, 1, 2, 2, 2)),
            9,
            true,
            100000000,
            260,
            75,
            75,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    StarFruit("Starfruit",
            new ArrayList<>(Arrays.asList(1, 2, 3, 3, 4)),
            13,
            true,
            100000000,
            750,
           125,
            125,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Summer_Spangle("SummerSpangle",
            new ArrayList<>(Arrays.asList(1, 2, 3, 1)),
            8,
            true,
            100000000,
            90,
            45,
            45,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Summer_Squash("SummerSquash",
            new ArrayList<>(Arrays.asList(1, 1, 1, 2, 1)),
            6,
            false,
            3,
            45,
            63,
            63,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Sunflower("Sunflower",
            new ArrayList<>(Arrays.asList(1, 2, 3, 2)),
            8,
            true,
            100000000,
            80,
            45,
            45,
            new ArrayList<>(List.of( Season.Summer,  Season.Fall)),
            false,
            1 ),
    Tomato("Tomato",
            new ArrayList<>(Arrays.asList(2, 2, 2, 2, 3)),
            11,
            false,
            4,
            60,
            20,
            20,
            new ArrayList<>(List.of( Season.Summer)),
            false,
            1 ),
    Wheat("Wheat",
            new ArrayList<>(Arrays.asList(1, 1, 1, 1)),
            4,
            true,
            100000000,
            25,
            null,
            0,
            new ArrayList<>(List.of( Season.Summer,  Season.Fall)),
            false,
            1 ),
    Amaranth("Amaranth",
            new ArrayList<>(Arrays.asList(1, 2, 2, 2)),
            7,
            true,
            100000000,
            150,
            50,
            50,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Artichoke("Artichoke",
            new ArrayList<>(Arrays.asList(2, 2, 1, 2, 1)),
            8,
            true,
            100000000,
            160,
            30,
            30,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Beet("Beet",
            new ArrayList<>(Arrays.asList(1, 1, 2, 2)),
            6,
            true,
            100000000,
            100,
            30,
            30,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Bok_Choy("BokChoy",
            new ArrayList<>(Arrays.asList(1, 1, 1, 1)),
            4,
            true,
            100000000,
            80,
            25,
            25,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Broccoli("Broccoli",
            new ArrayList<>(Arrays.asList(2, 2, 2, 2)),
            8,
            false,
            4,
            70,
            63,
            63,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Eggplant("Eggplant",
            new ArrayList<>(Arrays.asList(1, 1, 1, 1)),
            5,
            false,
            5,
            60,
            20,
            20,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Fairy_Rose("FairyRose",
            new ArrayList<>(Arrays.asList(1, 4, 4, 3)),
            12,
            true,
            100000000,
            290,
            45,
            45,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Grape("Grape",
            new ArrayList<>(Arrays.asList(1, 1, 2, 3, 3)),
            10,
            false,
            3,
            80,
            38,
            38,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Pumpkin("Pumpkin",
            new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3)),
            13,
            true,
            100000000,
            320,
            null,
            0,
            new ArrayList<>(List.of( Season.Fall)),
            true,
            1 ),
    Yam("Yam",
            new ArrayList<>(Arrays.asList(1, 3, 3, 3)),
            10,
            true,
            100000000,
            160,
            45,
            45,
            new ArrayList<>(List.of( Season.Fall)),
            false,
            1 ),
    Powdermelon("Powdermelon",
            new ArrayList<>(Arrays.asList(1, 2, 1, 2, 1)),
            7,
            true,
            100000000,
            60,
            63,
            63,
            new ArrayList<>(List.of( Season.Fall)),
            true,
            1 ),
    AncientFruit("AncientFruit",
            new ArrayList<>(Arrays.asList(2, 7, 7, 7, 5)),
            28,
            false,
            7,
            550,
            null,
            0,
            new ArrayList<>(List.of( Season.Spring,  Season.Summer,  Season.Fall)),
            false,
            1);
    
    private final String name;
    private final ArrayList<Integer> stage;
    private final int harvestTime;
    private final boolean oneTime;
    private final int regrowthTime;
    private final int baseSellPrice;
    // Null if it's not eatable
    private final Integer energyProduce;
    private final int energy;
    private final ArrayList< Season>  SeasonList;
    private final boolean canBecomeGiant;
    private final int stackSize;

    CropsType(String name,
               ArrayList<Integer> stage,
               int harvestTime,
               boolean oneTime,
               int regrowthTime,
               int baseSellPrice,
               Integer energyProduce,
               int energy,
               ArrayList< Season>  SeasonList,
               boolean canBecomeGiant,
               int stackSize
    ) {
        this.name = name;
        this.harvestTime = harvestTime;
        this.oneTime = oneTime;
        this.regrowthTime = regrowthTime;
        this.baseSellPrice = baseSellPrice;
        this.energyProduce = energyProduce;
        this.energy = energy;
        this. SeasonList =  SeasonList;
        this.canBecomeGiant = canBecomeGiant;
        this.stage = stage;
        this.stackSize = stackSize;
    }

    public String getName() {
        return name;
    }

    public ArrayList<Integer> getStage() {
        return stage;
    }

    public int getHarvestTime() {
        return harvestTime;
    }

    public boolean isOneTime() {
        return oneTime;
    }

    public int getRegrowthTime() {
        return regrowthTime;
    }

    public int getBaseSellPrice() {
        return baseSellPrice;
    }

    public Integer getEnergyProduce() {
        return energyProduce;
    }

    public int getEnergy() {
        return energy;
    }

    public ArrayList<Season> getSeasonList() {
        return SeasonList;
    }

    public boolean isCanBecomeGiant() {
        return canBecomeGiant;
    }

    public int getStackSize() {
        return stackSize;
    }
}
